<launch>
    <!--arg name="model" default="$(env fellowme_MODEL)" doc="model type [fellowme, remo]"/-->
    <arg name="model" default="fellowme" doc="model type [fellowme, remo]"/>
    
    <!-- The `minimal.launch` is used to load the fellowme's robot descripton
        and the controller configuration onto the ROS parameter server using the launch file from the 
        `fellowme_base` package (https://fjp.at/projects/fellowme/ros-packages/base/). 
        It will also setup the ROS controller manager (http://wiki.ros.org/controller_manager) with 
        fellowme's hardware interface https://fjp.at/projects/fellowme/ros-packages/base/#hardware-interface.
        For the motor driver the node `motor_driver.py` from the `grove_motor_driver` package is started.
        And for the encoders rosserial communicates with the Teensy microcontroller to publish the encoder ticks. 
    -->

    <include file="$(find fellowme_bringup)/launch/fellowme_minimal.launch">
        <arg name="model" value="$(arg model)" />
    </include>

    <!-- Brings up camera -->
    <include file="$(find realsense2_camera)/launch/rs_camera.launch">
    </include>

    <!-- Starting robot state publish which will publish tf -->
    <!-- This is needed to publish transforms between all links -->
    <!-- diff_drive_controller publishes only a single transfrom between odom and base_footprint -->
    <!-- The robot_state_publisher reads the joint states published by ros control's joint_state_controller -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
        output="screen" ns="fellowme">
        <remap from="/joint_states" to="/fellowme/joint_states" /> 
    </node>

    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" ns="fellowme"> 
        <remap from="/joint_states" to="/fellowme/joint_states" />
    </node>
    
</launch>

