# [ADVANCED] The process noise covariance matrix can be difficult to tune, and can vary for each application, so it is
# exposed as a configuration parameter. This matrix represents the noise we add to the total error after each
# prediction step. The better the omnidirectional motion model matches your system, the smaller these values can be.
# However, if users find that a given variable is slow to converge, one approach is to increase the
# process_noise_covariance diagonal value for the variable in question, which will cause the filter's predicted error
# to be larger, which will cause the filter to trust the incoming measurement more during correction. The values are
# ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below if
# unspecified.

observation_noise_covariance: [0.000001, 0,    0,    0,    0,   0,
                           0,    0.000001, 0,    0,    0,   0,
                           0,    0,    0.000001, 0,    0,   0,    
                           0,    0,    0,    0.000001, 0,    0,      
                           0,    0,    0,    0,    0.000001, 0,       
                           0,    0,    0,    0,    0,    0.000001]   
                           


# [ADVANCED] This represents the initial value for the state estimate error covariance matrix. Setting a diagonal
# value (variance) to a large value will result in rapid convergence for initial measurements of the variable in
# question. Users should take care not to use large values for variables that will not be measured directly. The values
# are ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below
#if unspecified.
initial_estimate_pose_covariance: [0.000001, 0,    0,    0,    0,    0,
                           0,    0.000001, 0,    0,    0,    0,       
                           0,    0,    0.000001, 0,    0,    0,       
                           0,    0,    0,    0.000001, 0,    0,       
                           0,    0,    0,    0,    0.000001, 0,       
                           0,    0,    0,    0,    0,    0.000001]    
                          
initial_estimate_vel_covariance: [0.000001, 0,    0,    0,    0,    0,
                           0,    0.000001, 0,    0,    0,    0,       
                           0,    0,    0.000001, 0,    0,    0,       
                           0,    0,    0,    0.000001, 0,    0,       
                           0,    0,    0,    0,    0.000001, 0,       
                           0,    0,    0,    0,    0,    0.000001]    
# process noise coeff
sigma_n: 0.5